
<h3>PILARES DE LA PROGRAMACION ORIENTADA A OBJETOS</h3>

<body>
    <h3>ABSTRACCIÓN:</h3>
    <en>
        En términos simples, la abstracción consiste en representar una entidad compleja mediante sus características más relevantes y ocultando los detalles 
        innecesarios. Es como si creáramos una versión simplificada de algo, manteniendo solo lo que necesitamos para interactuar con él. De esta forma, podemos 
        tratar con objetos de manera más intuitiva y eficiente.En POO, los objetos son las unidades fundamentales de abstracción. Podemos pensar en ellos como 
        entidades que tienen propiedades (atributos) y pueden realizar acciones (métodos).
    </en>
    <h3>ENCAPSULAMIENTO:</h3>
    <en>
        En la Programación orientada a objetos (POO), la encapsulación se refiere a la agrupación de datos con los métodos que operan en esos datos, 
        o la restricción del acceso directo a algunos de los componentes de un objeto.1​ La encapsulación se utiliza para ocultar los valores o el estado de 
        un objeto de datos estructurados dentro de una clase, evitando el acceso directo a ellos por parte de los clientes de una manera que podría exponer 
        detalles de Implementación ocultos o violar la invariancia de estado mantenida por los métodos.Sin embargo, ocultar datos no es el alcance total de la 
        ocultación de información. David Parnas introdujo por primera vez el concepto de ocultación de información alrededor de 1972.                                               
    </en>
    <h3>POLIMORFISMO:</h3>
    <en>
        La palabra polimorfismo viene del griego "polys" (muchos) y "morfo" (forma), y quiere decir "cualidad de tener muchas formas".
        En POO, el concepto de polimorfismo se refiere al hecho de que varios objetos de diferentes clases, pero con una base común, 
        se pueden usar de manera indistinta, sin tener que saber de qué clase exacta son para poder hacerlo.Supongamos que en 
        nuestro juego tenemos un montón de personajes que están juntos en un mismo escenario. Hay varios piratas, algunos
        estrategas y un montón de otros tipos de personas.  En un momento dado necesitamos que todos se pongan a hablar
    </en>
    <h3>HERENCIA:</h3>
    <en>
        En programación orientada a objetos, la herencia es, después de la agregación o composición, el mecanismo más utilizado 
        para alcanzar algunos de los objetivos más preciados en el desarrollo de software como lo son la reutilización y la extensibilidad. 
        A través de ella, los diseñadores pueden crear nuevas clases partiendo de una clase o de una jerarquía de clases preexistente
        (ya comprobadas y verificadas) evitando con ello el rediseño, la modificación y verificación de la parte ya implementada. 
    </en>
</body>
<body style="background-color: #FFF8E7;">
</body>